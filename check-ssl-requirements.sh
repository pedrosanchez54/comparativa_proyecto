#!/bin/bash

# Script para verificar requisitos SSL antes de obtener certificados
echo "üîç Verificando Requisitos SSL"
echo "============================"

# Funci√≥n para verificar resoluci√≥n DNS
check_dns() {
    echo "üåê Verificando resoluci√≥n DNS..."
    
    domain="proyectocomparativa.ddns.net"
    
    # Obtener IP actual del sistema
    local_ip=$(curl -s ifconfig.me 2>/dev/null || curl -s ipinfo.io/ip 2>/dev/null)
    
    # Resolver el dominio
    resolved_ip=$(dig +short $domain 2>/dev/null || nslookup $domain 2>/dev/null | grep "Address:" | tail -1 | awk '{print $2}')
    
    echo "   IP p√∫blica actual: $local_ip"
    echo "   IP del dominio:    $resolved_ip"
    
    if [ "$local_ip" = "$resolved_ip" ]; then
        echo "‚úÖ DNS resuelve correctamente"
        return 0
    else
        echo "‚ùå DNS no apunta a tu IP actual"
        echo "üí° Ve a No-IP y actualiza la direcci√≥n"
        return 1
    fi
}

# Funci√≥n para verificar puerto 80
check_port_80() {
    echo "üîå Verificando acceso al puerto 80..."
    
    # Verificar si hay algo escuchando en puerto 80 localmente
    if netstat -tlnp 2>/dev/null | grep -q ":80 "; then
        echo "‚ö†Ô∏è  Puerto 80 est√° ocupado localmente:"
        netstat -tlnp 2>/dev/null | grep ":80 "
        echo "üí° Det√©n el servicio que usa el puerto 80"
        return 1
    fi
    
    # Intentar bind temporalmente al puerto 80 para verificar
    if timeout 2 nc -l 80 >/dev/null 2>&1; then
        echo "‚úÖ Puerto 80 disponible localmente"
    else
        echo "‚ùå No se puede usar el puerto 80 localmente"
        echo "üí° Ejecuta como sudo o verifica permisos"
        return 1
    fi
}

# Funci√≥n para verificar conectividad externa
check_external_access() {
    echo "üåç Verificando acceso externo al puerto 80..."
    
    domain="proyectocomparativa.ddns.net"
    
    # Crear servidor temporal en puerto 80
    echo "üîÑ Iniciando servidor temporal en puerto 80..."
    echo "TEST_SSL_CHECK" > /tmp/ssl_test.html
    
    # Usar Python para crear servidor HTTP simple
    cd /tmp
    timeout 30 python3 -m http.server 80 >/dev/null 2>&1 &
    server_pid=$!
    
    sleep 3
    
    # Probar acceso externo
    echo "üß™ Probando acceso desde internet..."
    
    # Usar un servicio externo para probar la conectividad
    external_test=$(timeout 10 curl -s "https://check-host.net/check-http?host=http://$domain/ssl_test.html" 2>/dev/null)
    
    # Matar servidor temporal
    kill $server_pid 2>/dev/null
    wait $server_pid 2>/dev/null
    rm -f /tmp/ssl_test.html
    
    # Prueba manual m√°s simple
    echo "üí° Prueba manual: abre en tu navegador desde otra red:"
    echo "   http://$domain/"
    echo "   (deber√≠a mostrar error de conexi√≥n si el puerto est√° cerrado)"
    
    return 0
}

# Funci√≥n para mostrar configuraci√≥n del router
show_router_config() {
    echo ""
    echo "üìã CONFIGURACI√ìN DEL ROUTER NECESARIA"
    echo "====================================="
    echo ""
    echo "üîß Port Forwarding a configurar:"
    echo "   Puerto Externo: 80"
    echo "   Puerto Interno: 80"
    echo "   IP Interna: 192.168.1.82"
    echo "   Protocolo: TCP"
    echo ""
    echo "üìç Pasos para configurar:"
    echo "   1. Abre tu router (generalmente http://192.168.1.1)"
    echo "   2. Ve a 'Avanzado' o 'Advanced'"
    echo "   3. Busca 'Port Forwarding' o 'Reenv√≠o de puertos'"
    echo "   4. A√±ade una nueva regla:"
    echo "      - Nombre: SSL_HTTP"
    echo "      - Puerto externo: 80"
    echo "      - IP interna: 192.168.1.82"
    echo "      - Puerto interno: 80"
    echo "      - Protocolo: TCP"
    echo "   5. Guarda y reinicia el router si es necesario"
    echo ""
    echo "‚ö†Ô∏è  IMPORTANTE: El puerto 80 solo es necesario para obtener/renovar SSL"
}

# Funci√≥n para mostrar alternativas
show_alternatives() {
    echo ""
    echo "üîÑ ALTERNATIVAS SI NO PUEDES ABRIR PUERTO 80"
    echo "============================================"
    echo ""
    echo "1. üè† Certificados Self-Signed (solo desarrollo):"
    echo "   ./setup-frontend-https.sh"
    echo ""
    echo "2. üì± Validaci√≥n DNS (si tu proveedor lo permite):"
    echo "   - Requiere acceso a configuraci√≥n DNS"
    echo "   - M√°s complejo pero no necesita puerto 80"
    echo ""
    echo "3. ‚òÅÔ∏è  Usar un proxy/CDN como Cloudflare:"
    echo "   - Cloudflare proporciona SSL autom√°ticamente"
    echo "   - Requiere cambiar nameservers"
    echo ""
    echo "4. üîß Usar puerto diferente (no est√°ndar):"
    echo "   - Los usuarios tendr√≠an que especificar puerto"
    echo "   - Ejemplo: https://proyectocomparativa.ddns.net:8443"
}

# Funci√≥n principal
main() {
    echo "üöÄ Verificando requisitos para SSL..."
    echo ""
    
    dns_ok=true
    port_ok=true
    
    if ! check_dns; then
        dns_ok=false
    fi
    
    echo ""
    
    if ! check_port_80; then
        port_ok=false
    fi
    
    echo ""
    check_external_access
    
    echo ""
    echo "üìä RESUMEN DE VERIFICACI√ìN"
    echo "========================="
    
    if [ "$dns_ok" = true ]; then
        echo "‚úÖ DNS configurado correctamente"
    else
        echo "‚ùå DNS necesita configuraci√≥n"
    fi
    
    if [ "$port_ok" = true ]; then
        echo "‚úÖ Puerto 80 disponible localmente"
    else
        echo "‚ùå Puerto 80 no disponible"
    fi
    
    if [ "$dns_ok" = true ] && [ "$port_ok" = true ]; then
        echo ""
        echo "üéØ SIGUIENTE PASO: Configura port forwarding en el router"
        show_router_config
        echo ""
        echo "üîÑ Despu√©s ejecuta: sudo ./setup-ssl-nodejs.sh"
    else
        echo ""
        echo "‚ö†Ô∏è  HAY PROBLEMAS QUE RESOLVER ANTES DE CONTINUAR"
        show_router_config
        show_alternatives
    fi
}

# Ejecutar funci√≥n principal
main 
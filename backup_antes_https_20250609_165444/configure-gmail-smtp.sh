#!/bin/bash

# Script para configurar Gmail SMTP para recuperaci√≥n de contrase√±a
# Autor: Sistema de Configuraci√≥n de Correo
# Prop√≥sito: Hacer funcional al 100% la recuperaci√≥n de contrase√±a

set -e

# Colores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

print_header() {
    echo -e "\n${PURPLE}üìß === CONFIGURACI√ìN GMAIL SMTP - COMPARATIVA VEH√çCULOS ===${NC}\n"
}

print_success() {
    echo -e "${GREEN}$1${NC}"
}

print_error() {
    echo -e "${RED}$1${NC}"
}

print_warning() {
    echo -e "${YELLOW}$1${NC}"
}

print_info() {
    echo -e "${BLUE}$1${NC}"
}

# Funci√≥n para mostrar instrucciones
show_instructions() {
    print_info "üìã INSTRUCCIONES PARA OBTENER APP PASSWORD DE GMAIL:"
    echo
    echo "1. Ve a: https://myaccount.google.com/"
    echo "2. Haz clic en 'Seguridad' (en el men√∫ lateral)"
    echo "3. Busca 'Verificaci√≥n en 2 pasos' y act√≠vala si no la tienes"
    echo "4. Busca 'Contrase√±as de aplicaciones' y haz clic"
    echo "5. Selecciona 'Correo' y 'Otro dispositivo personalizado'"
    echo "6. Ponle nombre: 'Comparativa Vehiculos'"
    echo "7. Copia la contrase√±a de 16 caracteres que te genere"
    echo
    print_warning "‚ö†Ô∏è  IMPORTANTE: Usa la App Password, NO tu contrase√±a normal de Gmail"
    echo
}

# Funci√≥n para validar email
validate_email() {
    local email=$1
    if [[ $email =~ ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]]; then
        return 0
    else
        return 1
    fi
}

# Funci√≥n para backup
backup_env() {
    if [ -f "comparativa-backend/.env" ]; then
        cp comparativa-backend/.env "comparativa-backend/.env.backup.gmail.$(date +%Y%m%d_%H%M%S)"
        print_success "‚úÖ Backup del .env creado"
    fi
}

# Funci√≥n principal de configuraci√≥n
configure_gmail_smtp() {
    print_header
    
    # Verificar directorio
    if [ ! -d "comparativa-backend" ]; then
        print_error "‚ùå Este script debe ejecutarse desde el directorio ra√≠z del proyecto"
        exit 1
    fi
    
    show_instructions
    
    # Obtener email
    while true; do
        read -p "üìß Tu email de Gmail: " gmail_email
        if validate_email "$gmail_email"; then
            break
        else
            print_error "‚ùå Email no v√°lido. Introduce un email correcto."
        fi
    done
    
    # Obtener App Password
    while true; do
        read -s -p "üîë App Password de Gmail (16 caracteres): " gmail_app_password
        echo
        if [ ${#gmail_app_password} -eq 16 ]; then
            break
        else
            print_error "‚ùå El App Password debe tener exactamente 16 caracteres."
        fi
    done
    
    # Configurar email remitente
    read -p "üì§ Nombre para el remitente (Enter para 'Comparativa Veh√≠culos'): " sender_name
    if [ -z "$sender_name" ]; then
        sender_name="Comparativa Veh√≠culos"
    fi
    
    mail_from="$sender_name <$gmail_email>"
    
    print_info "\nüîß Configurando Gmail SMTP..."
    
    # Hacer backup
    backup_env
    
    # Actualizar .env
    sed -i "s|MAIL_HOST=.*|MAIL_HOST=smtp.gmail.com|g" comparativa-backend/.env
    sed -i "s|MAIL_PORT=.*|MAIL_PORT=587|g" comparativa-backend/.env
    sed -i "s|MAIL_USER=.*|MAIL_USER=$gmail_email|g" comparativa-backend/.env
    sed -i "s|MAIL_PASS=.*|MAIL_PASS=$gmail_app_password|g" comparativa-backend/.env
    sed -i "s|MAIL_FROM=.*|MAIL_FROM=$mail_from|g" comparativa-backend/.env
    
    print_success "‚úÖ Configuraci√≥n de Gmail SMTP completada"
    
    # Mostrar configuraci√≥n
    print_info "\nüìã Configuraci√≥n aplicada:"
    echo "   Email: $gmail_email"
    echo "   Remitente: $mail_from"
    echo "   Servidor: smtp.gmail.com:587"
    
    # Verificar configuraci√≥n
    print_info "\nüß™ Verificando configuraci√≥n..."
    
    cd comparativa-backend
    
    # Verificar nodemailer
    if node -e "const { verifyMailConfiguration } = require('./utils/mailerUtils'); verifyMailConfiguration().then(result => process.exit(result ? 0 : 1))"; then
        print_success "‚úÖ Configuraci√≥n verificada - El correo est√° funcionando"
        
        # Ofrecer prueba
        echo
        read -p "¬øQuieres enviar un email de prueba? (y/n): " send_test
        if [ "$send_test" = "y" ]; then
            read -p "üìß Email de destino para la prueba: " test_email
            if validate_email "$test_email"; then
                print_info "üì§ Enviando email de prueba..."
                if node -e "const { sendTestEmail } = require('./utils/mailerUtils'); sendTestEmail('$test_email').then(result => process.exit(result ? 0 : 1))"; then
                    print_success "‚úÖ Email de prueba enviado correctamente a $test_email"
                    print_info "üìß Revisa tu bandeja de entrada (y carpeta de spam)"
                else
                    print_error "‚ùå Error al enviar email de prueba"
                fi
            else
                print_error "‚ùå Email de destino no v√°lido"
            fi
        fi
    else
        print_error "‚ùå Error en la configuraci√≥n. Verifica tus credenciales."
        exit 1
    fi
    
    cd ..
    
    echo
    print_success "üéâ ¬°Configuraci√≥n completada!"
    print_info "üí° Ahora puedes probar la recuperaci√≥n de contrase√±a desde: http://proyectocomparativa.ddns.net:3000/"
    echo
    print_warning "üìù Comandos √∫tiles:"
    echo "   ‚Ä¢ Probar emails: cd comparativa-backend && node test-email.js"
    echo "   ‚Ä¢ Probar recuperaci√≥n completa: node test-password-reset.js"
    echo "   ‚Ä¢ Ver configuraci√≥n: cat comparativa-backend/.env | grep MAIL"
}

# Ejecutar configuraci√≥n
configure_gmail_smtp 
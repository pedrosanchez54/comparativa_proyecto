#!/usr/bin/env node

/**
 * Script de prueba para verificar la configuraci√≥n del sistema de correo
 * Uso: node test-email.js [email_destino]
 */

require('dotenv').config();
const { 
  sendTestEmail, 
  sendPasswordResetEmail, 
  verifyMailConfiguration,
  sendWelcomeEmail 
} = require('./utils/mailerUtils');

const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function askQuestion(question) {
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      resolve(answer);
    });
  });
}

async function main() {
  console.log('\nüöó === PRUEBA DEL SISTEMA DE CORREO - COMPARATIVA VEH√çCULOS ===\n');
  
  // Mostrar configuraci√≥n actual
  console.log('üìã Configuraci√≥n actual:');
  console.log(`   MAIL_HOST: ${process.env.MAIL_HOST || 'No configurado'}`);
  console.log(`   MAIL_PORT: ${process.env.MAIL_PORT || 'No configurado'}`);
  console.log(`   MAIL_USER: ${process.env.MAIL_USER || 'No configurado'}`);
  console.log(`   MAIL_FROM: ${process.env.MAIL_FROM || 'No configurado'}`);
  console.log(`   FRONTEND_URL: ${process.env.FRONTEND_URL || 'No configurado'}\n`);

  // Verificar configuraci√≥n
  console.log('üîç Verificando configuraci√≥n del transportador...');
  const isConfigValid = await verifyMailConfiguration();
  
  if (!isConfigValid) {
    console.log('\n‚ùå La configuraci√≥n no es v√°lida. Revisa las variables de entorno.');
    console.log('\nüí° Opciones de configuraci√≥n:');
    console.log('   1. Gmail SMTP: MAIL_HOST=smtp.gmail.com, MAIL_PORT=587');
    console.log('   2. Postfix Local: MAIL_HOST=localhost, MAIL_PORT=25');
    console.log('   3. Mailtrap: MAIL_HOST=smtp.mailtrap.io, MAIL_PORT=2525');
    process.exit(1);
  }

  // Obtener email de destino
  let testEmail = process.argv[2];
  if (!testEmail) {
    testEmail = await askQuestion('üìß Introduce el email de destino para las pruebas: ');
  }

  if (!testEmail || !testEmail.includes('@')) {
    console.log('‚ùå Email no v√°lido');
    process.exit(1);
  }

  console.log(`\nüéØ Enviando emails de prueba a: ${testEmail}\n`);

  // Men√∫ de opciones
  while (true) {
    console.log('\nüìã Selecciona una opci√≥n:');
    console.log('   1. Enviar email de prueba b√°sico');
    console.log('   2. Enviar email de restablecimiento de contrase√±a');
    console.log('   3. Enviar email de bienvenida');
    console.log('   4. Verificar configuraci√≥n nuevamente');
    console.log('   5. Cambiar email de destino');
    console.log('   0. Salir');

    const option = await askQuestion('\nüëâ Opci√≥n: ');

    switch (option) {
      case '1':
        console.log('\nüì§ Enviando email de prueba b√°sico...');
        const testResult = await sendTestEmail(testEmail);
        if (testResult) {
          console.log('‚úÖ Email de prueba enviado correctamente');
        } else {
          console.log('‚ùå Error al enviar email de prueba');
        }
        break;

      case '2':
        console.log('\nüîê Enviando email de restablecimiento de contrase√±a...');
        const resetToken = 'test_token_' + Date.now();
        const resetResult = await sendPasswordResetEmail(testEmail, resetToken);
        if (resetResult) {
          console.log('‚úÖ Email de restablecimiento enviado correctamente');
          console.log(`üîó Token de prueba: ${resetToken}`);
        } else {
          console.log('‚ùå Error al enviar email de restablecimiento');
        }
        break;

      case '3':
        const userName = await askQuestion('üë§ Nombre del usuario para el email de bienvenida: ');
        console.log('\nüéâ Enviando email de bienvenida...');
        const welcomeResult = await sendWelcomeEmail(testEmail, userName || 'Usuario');
        if (welcomeResult) {
          console.log('‚úÖ Email de bienvenida enviado correctamente');
        } else {
          console.log('‚ùå Error al enviar email de bienvenida');
        }
        break;

      case '4':
        console.log('\nüîç Verificando configuraci√≥n...');
        await verifyMailConfiguration();
        break;

      case '5':
        testEmail = await askQuestion('üìß Nuevo email de destino: ');
        if (!testEmail || !testEmail.includes('@')) {
          console.log('‚ùå Email no v√°lido');
        } else {
          console.log(`‚úÖ Email actualizado a: ${testEmail}`);
        }
        break;

      case '0':
        console.log('\nüëã ¬°Hasta luego!');
        rl.close();
        process.exit(0);
        break;

      default:
        console.log('‚ùå Opci√≥n no v√°lida');
        break;
    }
  }
}

// Manejo de errores
process.on('unhandledRejection', (error) => {
  console.error('\n‚ùå Error no manejado:', error.message);
  process.exit(1);
});

process.on('SIGINT', () => {
  console.log('\n\nüëã Proceso interrumpido por el usuario');
  rl.close();
  process.exit(0);
});

// Ejecutar script
main().catch((error) => {
  console.error('\n‚ùå Error en el script:', error.message);
  process.exit(1);
}); 